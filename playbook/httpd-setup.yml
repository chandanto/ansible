##--------------------------------------------------------------------------------------##
############ Ansible-playbook used to deploy the static content to host server ###########
## 											##
## 1) Check httpd package aviable on remote-traget hosts				## 
## 2) Check the status of the server							##
## 3) Step 1) Backup the file on remote-traget machine					##
## 4) Step 2) Deploy the static content to remote-target servers			##
## 5) Step 3) Taking extra backup from remote-traget servers to local Control machines	##
## 6) Step 4) Check the syntax after deploying the content				##
## 7) Step 5) All checks are 'ok' Stop & Start the apache web server			##
## 8) Step 6) Perform the basic check-out using 'uri' module to confirm content loading ##
##						    Vesion 1.0 > Authour by:Chandan     ##
##--------------------------------------------------------------------------------------##

---
- hosts: all
  tasks:

# Use httpd module to setup webserver
       - name: Check the httpd services available on targeted-machines
         yum:
             name: httpd
             state: present

# Main Call : >> Checking webserver up/down -- Status
       - name: Check httpd status ...........
#         shell: /etc/init.d/httpd status
         shell: " ps -aef | grep apache | grep -v grep  | wc -l "
         register: result
         ignore_errors: True
         notify:
             - Start the httpd service 
             - static-deployment
             - start-apache
         

# Handler to allowing httpd to copy the src file to all remote-target servers
  handlers:

# Step 1) Backup the orginal file's on remote-traget server before proceeding
      - name: Backup the files on remote-traget hosts
        shell: mv /var/www/html/{{ item }} /var/www/html/{{ item }}_{{ ansible_date_time.date }} 
#        ignore_errors: True
        with_items: 
            - first.html
            - second.html
            - third.html
        ignore_errors: True
        listen: static-deployment

# Step 2) Deploy the static content to remote-target servers          
      - name: Deploy the static files to remote-target host
        copy: src=/opt/ansible-playbook/Playbook/Testing/httpd-start/file/{{ item.src }} dest=/var/www/html/{{ item.dest }} force=no mode={{ item.mode }}
        with_items: 
             - { src: 'first.html', dest: 'first.html', mode: '0755' }
             - { src: 'second.html', dest: 'second.html', mode: '0755' }
             - { src: 'third.html', dest: 'third.html', mode: '0755' }
        listen: static-deployment

# Step 3) Taking extra backup from remote-target servers to local Control machines
      - name: Copy file from remote-target machine to local ansible machine {{ ansible_hostname }}
        fetch: dest=/tmp/{{ ansible_hostname }}/ src=/var/www/html/{{ item }} flat=yes
        with_items:
             - first.html
             - second.html
             - third.html
        listen: static-deployment


# Step 4) Checking the syntax after deploy new content
      - name: Syntax check ............
        become: true
        shell: "/usr/sbin/httpd -t"
        register: syntaxcheck
        failed_when: "'Syntax OK' not in syntaxcheck.stderr"
        listen: static-deployment


# Step 5) Restarting the remote-traget httpd server after content deployed to target servers
      - name: Stop the httpd service ...........
        become: true
        service: name=httpd state=stopped
        listen: static-deployment

      - name: Check httpd process
        become: true
        shell: "ps -aef | grep apache | grep -v grep  | wc -l"
        register: checkprocess
        listen: start-apache
        
      - name: Start the httpd service
        become: true
        service: name=httpd state=started
        when: checkprocess.stdout == "0" 
        listen: start-apache

# Step 6) Get the content after deployment vaildating based on last-modification file & status code always 200
      - name: uri to get the status of page
        uri: 
          url: http://{{ ansible_enp0s3.ipv4.address }}:80/{{ item }}
          method: GET
          status_code: 200 
        with_items:
             - first.html
             - second.html
             - third.html
        listen: start-apache 
# Step 7) wait until the lock file is removed
#      - wait_for: path=/var/www/html/httpd.lock state=absent
